{"version":3,"sources":["sites/src/sites.js"],"names":["$","Craft","SitesAdmin","Garnish","Base","extend","$groups","$selectedGroup","addListener","this","find","$groupSettingsBtn","settings","onOptionSelect","data","proxy","elem","$elem","hasClass","renameSelectedGroup","deleteSelectedGroup","name","promptForGroupName","response","success","textStatus","href","id","location","getUrl","groupId","group","flattenErrors","errors","alert","t","join","cp","displayError","newName","oldName","text","postActionRequest","displayNotice","confirm","responseErrors","hasOwnProperty","SiteAdminTable","AdminTable","attribute","concat","confirmDeleteModal","isMobileBrowser","setTimeout","$deleteSubmitBtn","$deleteActionRadios","$deleteSpinner","_deleting","confirmDeleteItem","$row","validateDeleteInputs","_createConfirmDeleteModal","validates","first","trigger","eq","prop","getItemId","removeClass","transferContentTo","$transferSelect","submitDeleteLocale","ev","$rowToDelete","addClass","disable","val","deleteAction","appendTo","$buttons","length","i","enable","hide","handleDeleteItemResponse","$form","getItemName","getCsrfInput","$bod","$body","language","$cancelBtn","site","sites","append","escapeHtml","Modal","jQuery"],"mappings":"CAAA,SAACA,GAEGC,MAAAC,WAAAC,QAAAC,KAAAC,OACMH,CAESI,QADX,KAEIC,eAFJ,KAKaD,KAAL,WACKC,KAAAA,QAAiBP,EAAKM,WACtBE,KAAAA,eAAcC,KAAiBH,QAAAI,KAAY,eAE5CC,KAAAA,YAAsBX,EAAA,gBAA1B,WAAA,eAEIW,IAAAA,EAA0BX,EAAA,qBAGlBY,EAASC,SACbF,EAAAG,KAAA,WAEIF,SAAeC,eAAab,EAAAe,OAAA,SAAAC,GAC5B,IAAAC,EAAAjB,EAAAgB,GADJ,IAAIC,EAAMC,SAAS,YAMNC,OAAAA,EAAAA,KAAL,WACA,IAAA,SACHV,KAAAU,sBADG,MAEW,IAAA,SACNC,KAAAA,yBAbjBX,QAsBAY,YAAYC,WAAhB,IAAID,EAAOZ,KAAKa,mBAAmB,IAGvB,GAAGD,EAAA,CACDA,IAAAA,EAAAA,CADVA,KAAAA,GAMYE,MAASC,kBAAS,mBAAAV,EAAAd,EAAAe,OAAA,SAAAQ,EAAAE,GACTC,GAAoB,YAA7BD,EAAyDF,GAAAA,EAAeI,QAAxEC,SAAAF,KAAAzB,MAAA4B,OAAA,iBAAA,CAAAC,QAAAP,EAAAQ,MAAAJ,UAGkBK,GAAAA,EAAcT,OAAQ,CAC1B,IAAOU,EAAAxB,KAAAuB,cAAfT,EAAgDU,QAErDC,MAAAjC,MAAAkC,EAAA,MAAA,+BAAA,OAAAF,EAAAG,KAAA,YAGRnC,MAAAoC,GAAAC,iBAvDjB7B,SA4DIU,oBAAqB,WAIboB,IAAOC,EAAW/B,KAAK+B,eAASC,OACrBF,EAAA9B,KAAAa,mBAAAkB,GAEDD,GAAAA,GAAAA,IAAAA,EAAAA,CAFV,IAAAzB,EAAA,CAKM4B,GAAAA,KAAkBnC,eAAAO,KAAoBA,MAC1BO,KAAKkB,GAGLF,MAAGM,kBAAc,mBAAe7B,EAAtCd,EAAAe,OAAA,SAAAQ,EAAAE,GAEKF,GAAiB,YAAjBA,EACQ,GAAKS,EAAAA,QACJvB,KAAOF,eAAAkC,KAAAlB,EAAfQ,MAAgDV,MAErDpB,MAAAoC,GAAAM,cAAA1C,MAAAkC,EAAA,MAAA,wBAEJ,GAAAZ,EAAAU,OAAA,CACJ,IAAAA,EAAAxB,KAAAuB,cAAAT,EAAAU,QAbLC,MAAAjC,MAAAkC,EAAA,MAAA,+BAAA,OAAAF,EAAAG,KAAA,YAkBYnC,MAASuC,GAATF,iBAID7B,SAEXa,mBAAA,SAAAkB,GAIME,OAAAA,OAAAA,MAAkBP,EAAA,MAAA,uCAA6CZ,IAGzDK,oBAAgB3B,WADpB,GAGK2C,QAAA3C,MAAAkC,EAAA,MAAA,gDAAA,CACKE,IAAGC,EAAAA,CACZX,GAAAlB,KAAAF,eAAAO,KAAA,OAGZb,MAAAyC,kBAAA,qBAAA5B,EAAAd,EAAAe,OAAA,SAAAQ,EAAAE,GA5GT,YAAAA,IA+G4BoB,EAAAA,QACpBjB,SAAAF,KAAAzB,MAAA4B,OAAA,kBAGwBiB,MAAAA,GAAAA,kBARjBrC,SAePuB,cAAA,SAAAa,GACH,IAAAZ,EAAA,GAGHc,IAAAA,IAAiB9C,KAAM+C,EAEDH,EADxBC,eAAAG,KAMoBhB,EANpBA,EAAAiB,OAAAL,EAAAI,KAWiBE,OAAAA,KAZrBlD,MAAM8C,eAAiB9C,MAAM+C,WAAW3C,OAiB5B,CAfJ8C,mBAAoB,KAkBXhD,aAAQiD,KACTC,oBAAmB,KACfC,iBAAKC,KACNC,eAFH,KAZRC,WAAW,EARfC,kBAAA,SAAAC,GA+CiBF,OAnBbG,KAAoBT,qBACH1C,KACT0C,mBAAKI,iBAjBE9C,KAAK0C,oBAwBX1C,KAAAoD,0BAAAF,GAlBAxD,QAAQiD,iBAAgB,IAsBtBU,WAAP9D,EAAAe,OAAA,WAzCRN,KAAA8C,oBAAAQ,QAAAC,QAAA,WA4CsBvD,MAAE,MAGPgD,GAnBbG,qBAAsB,WAuBbN,IAAAA,EACAE,KAALD,oBAAgCU,GAAhC,GAAAC,KAAA,YACAzD,KAAA8C,oBAAAU,GAAA,GAAAC,KAAA,WAYMxB,OAROyB,EAGb1D,KAAA6C,iBAAAc,YAAA,YAESC,KAAAA,iBAAyBC,SAAAA,YAG5B5B,GAGE6B,mBAAA,SAAAC,GAGH,GAFQrB,EAAAA,kBAER1C,KAAAgD,WAAAhD,KAAAmD,uBAAA,CAKAa,KAAAA,iBAALC,SAAA,UAESjE,KAAK0D,eAAdC,YAAA,UACQ3D,KAAGkE,UAEFlE,KACDgD,WAAA,EAQiH,IAAEpC,EAAAA,CACnHM,GAAAlB,KAAA0D,UAAA1D,KAFAgE,eAiBHH,KAAAA,oBAAoBL,GAAD,GAAoBvD,KAAK,aAC5C4C,EAAAA,kBAAqB7C,KAAA6D,gBAAAM,OACrBpB,MAAAA,kBAAmB/C,KAAAG,SAAAiE,aAAiCC,EAASC,EAAAA,OAAlE,SAAAxD,EAAAE,GA1CuB,YAAfA,IA4CShB,KAAGR,WAAY+E,EACZC,KAAZC,SACKZ,KAAAA,mBAAuBa,OAC/B1E,KAAA2E,yBAAA7D,EAAAd,KAAAgE,iBAzCFhE,SA+CCoD,0BAAA,SAAAF,GADJlD,KAAAgE,aAAAd,EAKKnD,IAAAA,EAAY6E,KAAOlB,UAAUR,GACrCtC,EAAAZ,KAAA6E,YAAA3B,GA/Pb0B,EAAArF,EAqNwB,2FACAC,MAAMsF,eADN,+GAG2C5D,EAH3C,cAKFmD,SAAS3E,QAAQqF,MACnBC,EAAQzF,EACJ,wBACQC,MAAMkC,EAAE,MAAO,gFAAiF,CAACuD,SAAUrE,IADnH,+FAGwEpB,MAAMkC,EAAE,MAAO,mBAHvF,+IASsElC,MAAMkC,EAAE,MAAO,aATrF,wBAYF2C,SAASO,GACXN,EAAW/E,EAAE,gCAAgC8E,SAASW,GACtDE,EAAa3F,EAAE,oBAAsBC,MAAMkC,EAAE,MAAO,UAAY,UAAU2C,SAASC,GAEvFtE,KAAK8C,oBAAsBkC,EAAM/E,KAAK,qBACtCD,KAAK6D,gBAAkBtE,EAAE,mBAAmBU,KAAK,YACjDD,KAAK6C,iBAAmBtD,EAAE,2DAA6DC,MAAMkC,EAAE,MAAO,gBAAiB,CAACyD,KAAMvE,IAAS,QAAQyD,SAASC,GACxJtE,KAAK+C,eAAiBxD,EAAE,iCAAiC8E,SAASC,GAElE,IAAK,IAAIE,EAAI,EAAGA,EAAIhF,MAAM4F,MAAMb,OAAQC,IAChChF,MAAM4F,MAAMZ,GAAGtD,IAAMA,GACrBlB,KAAK6D,gBAAgBwB,OAAO,kBAAoB7F,MAAM4F,MAAMZ,GAAGtD,GAAK,KAAO1B,MAAM8F,WAAW9F,MAAM4F,MAAMZ,GAAG5D,MAAQ,aAI3HZ,KAAK0C,mBAAqB,IAAIhD,QAAQ6F,MAAMX,GAE5C5E,KAAKD,YAAYmF,EAAY,SAAS,WAClClF,KAAK0C,mBAAmBgC,UAG5B1E,KAAKD,YAAYC,KAAK8C,oBAAqB,SAAU,wBACrD9C,KAAKD,YAAY6E,EAAO,SAAU,yBA9PlD,CAiQGY","file":"sites.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.SitesAdmin = Garnish.Base.extend(\n        {\n            $groups: null,\n            $selectedGroup: null,\n\n            init: function() {\n                this.$groups = $('#groups');\n                this.$selectedGroup = this.$groups.find('a.sel:first');\n                this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n                var $groupSettingsBtn = $('#groupsettingsbtn');\n\n                if ($groupSettingsBtn.length) {\n                    var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                    menuBtn.settings.onOptionSelect = $.proxy(function(elem) {\n                        var $elem = $(elem);\n\n                        if ($elem.hasClass('disabled')) {\n                            return;\n                        }\n\n                        switch ($elem.data('action')) {\n                            case 'rename': {\n                                this.renameSelectedGroup();\n                                break;\n                            }\n                            case 'delete': {\n                                this.deleteSelectedGroup();\n                                break;\n                            }\n                        }\n                    }, this);\n                }\n            },\n\n            addNewGroup: function() {\n                var name = this.promptForGroupName('');\n\n                if (name) {\n                    var data = {\n                        name: name\n                    };\n\n                    Craft.postActionRequest('sites/save-group', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                location.href = Craft.getUrl('settings/sites', {groupId: response.group.id});\n                            }\n                            else if (response.errors) {\n                                var errors = this.flattenErrors(response.errors);\n                                alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                            }\n                            else {\n                                Craft.cp.displayError();\n                            }\n                        }\n                    }, this));\n                }\n            },\n\n            renameSelectedGroup: function() {\n                var oldName = this.$selectedGroup.text(),\n                    newName = this.promptForGroupName(oldName);\n\n                if (newName && newName !== oldName) {\n                    var data = {\n                        id: this.$selectedGroup.data('id'),\n                        name: newName\n                    };\n\n                    Craft.postActionRequest('sites/save-group', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                this.$selectedGroup.text(response.group.name);\n                                Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                            }\n                            else if (response.errors) {\n                                var errors = this.flattenErrors(response.errors);\n                                alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                            }\n                            else {\n                                Craft.cp.displayError();\n                            }\n                        }\n                    }, this));\n                }\n            },\n\n            promptForGroupName: function(oldName) {\n                return prompt(Craft.t('app', 'What do you want to name the group?'), oldName);\n            },\n\n            deleteSelectedGroup: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this group?'))) {\n                    var data = {\n                        id: this.$selectedGroup.data('id')\n                    };\n\n                    Craft.postActionRequest('sites/delete-group', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                location.href = Craft.getUrl('settings/sites');\n                            }\n                            else {\n                                Craft.cp.displayError();\n                            }\n                        }\n                    }, this));\n                }\n            },\n\n            flattenErrors: function(responseErrors) {\n                var errors = [];\n\n                for (var attribute in responseErrors) {\n                    if (!responseErrors.hasOwnProperty(attribute)) {\n                        continue;\n                    }\n\n                    errors = errors.concat(responseErrors[attribute]);\n                }\n\n                return errors;\n            }\n        });\n\n    Craft.SiteAdminTable = Craft.AdminTable.extend(\n        {\n            confirmDeleteModal: null,\n\n            $rowToDelete: null,\n            $deleteActionRadios: null,\n            $deleteSubmitBtn: null,\n            $deleteSpinner: null,\n\n            _deleting: false,\n\n            confirmDeleteItem: function($row) {\n                if (this.confirmDeleteModal) {\n                    this.confirmDeleteModal.destroy();\n                    delete this.confirmDeleteModal;\n                }\n\n                this._createConfirmDeleteModal($row);\n\n                // Auto-focus the first radio\n                if (!Garnish.isMobileBrowser(true)) {\n                    setTimeout($.proxy(function() {\n                        this.$deleteActionRadios.first().trigger('focus');\n                    }, this), 100);\n                }\n\n                return false;\n            },\n\n            validateDeleteInputs: function() {\n                var validates = (\n                    this.$deleteActionRadios.eq(0).prop('checked') ||\n                    this.$deleteActionRadios.eq(1).prop('checked')\n                );\n\n                if (validates) {\n                    this.$deleteSubmitBtn.removeClass('disabled');\n                }\n                else {\n                    this.$deleteSubmitBtn.addClass('disabled');\n                }\n\n                return validates;\n            },\n\n            submitDeleteLocale: function(ev) {\n                ev.preventDefault();\n\n                if (this._deleting || !this.validateDeleteInputs()) {\n                    return;\n                }\n\n                this.$deleteSubmitBtn.addClass('active');\n                this.$deleteSpinner.removeClass('hidden');\n                this.disable();\n                this._deleting = true;\n\n                var data = {\n                    id: this.getItemId(this.$rowToDelete)\n                };\n\n                // Are we transferring content?\n                if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                    data.transferContentTo = this.$transferSelect.val();\n                }\n\n                Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._deleting = false;\n                        this.enable();\n                        this.confirmDeleteModal.hide();\n                        this.handleDeleteItemResponse(response, this.$rowToDelete);\n                    }\n                }, this));\n            },\n\n            _createConfirmDeleteModal: function($row) {\n                this.$rowToDelete = $row;\n\n                var id = this.getItemId($row),\n                    name = this.getItemName($row);\n\n                var $form = $(\n                        '<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\">' +\n                        Craft.getCsrfInput() +\n                        '<input type=\"hidden\" name=\"action\" value=\"localization/deleteLocale\"/>' +\n                        '<input type=\"hidden\" name=\"id\" value=\"' + id + '\"/>' +\n                        '</form>'\n                    ).appendTo(Garnish.$bod),\n                    $body = $(\n                        '<div class=\"body\">' +\n                        '<p>' + Craft.t('app', 'What do you want to do with any content that is only available in {language}?', {language: name}) + '</p>' +\n                        '<div class=\"options\">' +\n                        '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label> ' +\n                        '<div id=\"transferselect\" class=\"select\">' +\n                        '<select/>' +\n                        '</div>' +\n                        '</div>' +\n                        '<div>' +\n                        '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                        '</div>' +\n                        '</div>'\n                    ).appendTo($form),\n                    $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                    $cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttons);\n\n                this.$deleteActionRadios = $body.find('input[type=radio]');\n                this.$transferSelect = $('#transferselect').find('> select');\n                this.$deleteSubmitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Delete {site}', {site: name}) + '\" />').appendTo($buttons);\n                this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id != id) {\n                        this.$transferSelect.append('<option value=\"' + Craft.sites[i].id + '\">' + Craft.escapeHtml(Craft.sites[i].name) + '</option>');\n                    }\n                }\n\n                this.confirmDeleteModal = new Garnish.Modal($form);\n\n                this.addListener($cancelBtn, 'click', function() {\n                    this.confirmDeleteModal.hide();\n                });\n\n                this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n                this.addListener($form, 'submit', 'submitDeleteLocale');\n            }\n        });\n})(jQuery);\n"]}